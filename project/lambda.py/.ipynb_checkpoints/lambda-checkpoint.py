{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef4873cd-ab51-49fe-89dd-0f663074bb6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "## First function\n",
    "\n",
    "import json\n",
    "import boto3\n",
    "import base64\n",
    "\n",
    "s3 = boto3.client('s3')\n",
    "\n",
    "def lambda_handler(event, context):\n",
    "    \"\"\"A function to serialize target data from S3\"\"\"\n",
    "\n",
    "    # Get the s3 address from the Step Function event input\n",
    "    key = event.get('s3_key')  # Changed from event['s3_key'] to event.get('s3_key')\n",
    "    bucket = event.get('s3_bucket')  # Changed from event['s3_bucket'] to event.get('s3_bucket')\n",
    "\n",
    "    # Check if the key and bucket are present\n",
    "    if key is None:\n",
    "        raise ValueError(\"s3_key not found in the event.\")\n",
    "    if bucket is None:\n",
    "        raise ValueError(\"s3_bucket not found in the event.\")\n",
    "\n",
    "    # Download the data from s3 to /tmp/image.png\n",
    "    s3.download_file(bucket, key, \"/tmp/image.png\")\n",
    "    \n",
    "    # We read the data from a file\n",
    "    with open(\"/tmp/image.png\", \"rb\") as f:\n",
    "        image_data = base64.b64encode(f.read()).decode('utf-8')  # Added .decode('utf-8') to convert bytes to string\n",
    "\n",
    "    # Pass the data back to the Step Function\n",
    "    print(\"Event keys:\", event.keys())\n",
    "    return {\n",
    "        'statusCode': 200,\n",
    "        'body': {  # Wrapped the body in json.dumps to ensure it's a JSON string\n",
    "            \"image_data\": image_data,\n",
    "            \"s3_bucket\": bucket,\n",
    "            \"s3_key\": key,\n",
    "            \"inferences\": []\n",
    "        }\n",
    "    }\n",
    "\n",
    "\n",
    "    ## second function\n",
    "\n",
    "\"\"\" The second one is responsible for image classification.\n",
    "It takes the image output from the lambda 1 function(SerializeImageData), decodes it, and then pass inferences back to the the Step Function.\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "import io\n",
    "import boto3\n",
    "import json\n",
    "import base64\n",
    "# import sagemaker\n",
    "# from sagemaker.serializers import IdentitySerializer\n",
    "\n",
    "\n",
    "# setting the  environment variables\n",
    "ENDPOINT_NAME = 'image-classification-2025-09-26-21-47-29-284'\n",
    "# # We will be using the AWS's lightweight runtime solution to invoke an endpoint.\n",
    "runtime= boto3.client('runtime.sagemaker')\n",
    "\n",
    "def lambda_handler(event, context):\n",
    "\n",
    "    # # Decode the image data\n",
    "    image = base64.b64decode(event[\"body\"][\"image_data\"])\n",
    "    \n",
    "    # Make a prediction:\n",
    "    predictor = runtime.invoke_endpoint(EndpointName=ENDPOINT_NAME,\n",
    "                                    #   ContentType='image/png',\n",
    "                                    ContentType='application/x-image',\n",
    "                                      Body=image)\n",
    "    \n",
    "    # We return the data back to the Step Function    \n",
    "    event[\"inferences\"] = json.loads(predictor['Body'].read().decode('utf-8'))\n",
    "    return {\n",
    "        'statusCode': 200,\n",
    "        # 'body': json.dumps(event)\n",
    "        \"body\": {\n",
    "            \"image_data\": event[\"body\"]['image_data'],\n",
    "            \"s3_bucket\": event[\"body\"]['s3_bucket'],\n",
    "            \"s3_key\": event[\"body\"]['s3_key'],\n",
    "            \"inferences\": event['inferences'],\n",
    "       }\n",
    "    }\n",
    "\n",
    "    ## 3rd function\n",
    "   \n",
    "import json\n",
    "\n",
    "THRESHOLD = 0.9\n",
    "\n",
    "def lambda_handler(event, context):\n",
    "    # Parse event body if it's a JSON string\n",
    "    body = event.get(\"body\")\n",
    "    \n",
    "    if isinstance(body, str):\n",
    "        body = json.loads(body)\n",
    "    \n",
    "    # Get the inferences from the body\n",
    "    inferences = body.get(\"inferences\")\n",
    "    \n",
    "    if inferences is None:\n",
    "        raise ValueError(\"No inferences provided in the body.\")\n",
    "\n",
    "    # Check if any values in inferences are above THRESHOLD\n",
    "    meets_threshold = (max(inferences) > THRESHOLD)\n",
    "    \n",
    "    # If our threshold is met, pass our data back out of the Step Function\n",
    "    if meets_threshold:\n",
    "        return {\n",
    "            'statusCode': 200,\n",
    "            'body': json.dumps(event)\n",
    "        }\n",
    "    else:\n",
    "        raise ValueError(\"THRESHOLD_CONFIDENCE_NOT_MET\") "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
